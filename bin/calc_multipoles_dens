#!/usr/bin/env python
import matplotlib.pyplot as plt
import time
import argparse
import numpy as np
import MDAnalysis as mda

from multipole.point_charge_water import pc_objs
from multipole.trajectory_prepare import TrajectoryPreparer


#from MDAnalysis.transformations import unwrap
from multipole import Multipoles


def set_up_parser():
    parser = argparse.ArgumentParser(
        description='Calculate the bins of the charge, dipole and quadrapole. Currently only implemented for water.. This can be done for just a single frame, or an entire trajectory')
    parser.add_argument("topfile", help='The topology file name', type=str)
    # optional trajectory argument -t
    parser.add_argument("-f", "--trajfile", default=None,
                        type=str, metavar='Trajectory')
    parser.add_argument("-v", "--verbose", default=False,
                        action="store_true", help='Increase verbosity')
    parser.add_argument("-m", "--inmem", default=False,
                        action="store_true", help='Load Trajectory Into memory')
    parser.add_argument("--water_model", default="tip4p05", choices=[
                        'tip4p05', 'spce', 'tip3p', 'opc'], help="calculate the mutipole moments for the specified water model. Applies some pre-processing such as assigning charges if not already. Future versions will make None default, so non water systems can be used.")
    parser.add_argument("-b", "--begin", default="0")
    parser.add_argument("-e", "--end", default="-1")
    parser.add_argument("-M", "--M_name", default="M",
                        help='the atom name or type to use for the centre of the molecule for binning and multipole moment calculation. Should use O for tip3p/spc styles and dummy atom for tip4p styles.')
    parser.add_argument("-H", "--H_name", default="H", nargs='+', type=str)

    parser.add_argument("-w", "--bin_width", default=0.25, type=float,
                        help='The target width of the bins to use, in Angstrom. Overridden if number of bins is set instead')
    parser.add_argument("-c", "--coord_centre", default=False, action="store_true",
                        help='if used, binned coordinate is centre of the bin, else it is the left edge')
    parser.add_argument("--check_unwrapped",
                        default=False, action="store_true")
    parser.add_argument("--types_or_names", default=None, choices=[
                        None, 'type', 'name'], help='Specify whether hydrogen/centre choice is in reference to the atom type or name. By default tries to find names')

    return parser
if __name__ == "__main__":

    parser = set_up_parser()

    args = parser.parse_args()

    if args.verbose:
        print('Started', time.strftime("%a, %d %b %Y %H:%M:%S"))

    traj_prep = TrajectoryPreparer(parser, models=pc_objs)
    # checking if the coords in last step need to be unwrapped:
    traj_prep.wrap_check()
    traj_prep.rewind_traj()
    u = traj_prep.u

    # Check if the system has either atom name or type topology information.
    # if args.types_or_names:
    #     types_or_names = args.types_or_names
    # else:
    #     types_or_names = Multipoles.check_types_or_names(u)
    # verify if charges are present or not.
    try:
        u.atoms.charges
        charges_defined = True
    except mda.NoDataError:
        charges_defined = False

    multip = Multipoles(u.atoms, verbose=args.verbose, centre=args.M_name,
                        H_types=args.H_name, binsize=args.bin_width)
    multip.run()
    if args.verbose:
        print('Calculation finished')

    if args.coord_centre:
        # bins at centre
        true_bw = (multip.ul-multip.ll)/multip.nbins
        # arange used to ensure the coordinate doesn't go over the box edge
        z = np.arange(multip.ll+true_bw/2, multip.ul, true_bw)
    else:
        # bins at left edge
        # excludes the last point, so that the left edges are considered only
        z = np.linspace(multip.ll, multip.ul, multip.nbins, endpoint=False)
        z = multip.left_edges
    if args.verbose:
        print('Starting save')
    np.savetxt('profs.dat', np.array([z, multip.charge_dens, multip.dipole[0, :], multip.dipole[1, :], multip.dipole[2, :], multip.quadrapole[0, 0, :], multip.quadrapole[1, 1, :], multip.quadrapole[2, 2, :], multip.quadrapole[0, 1, :],
                                     multip.quadrapole[0, 2, :], multip.quadrapole[1, 2, :], multip.mol_density, multip.cos_theta, multip.angular_moment_2]).T, header='coord charge_dens P_x P_y P_z Q_xx Q_yy Q_zz Q_xy Q_xz Q_yz rho_mol cos_theta cos_theta_moment_2')

    plt.plot(z, multip.charge_dens, label='rho')
    plt.plot(z, multip.quadrapole[2, 2, :], label='P_z')
    plt.plot(z, multip.dipole[2, :], label='Q_ZZ')
    plt.savefig('profs.png')
    plt.close()

    plt.plot(z, multip.cos_theta, label=r'$\langle \cos(\theta)\rangle$')
    plt.plot(z, multip.angular_moment_2,
             label=r'$\frac{1}{2}\left 3\langle \cos(\theta)^2\rangle-1\right)')
    plt.savefig('angles.png')
    plt.close()

    if args.verbose:
        print('Finished', time.strftime("%a, %d %b %Y %H:%M:%S"))

    #print('Finished', time.strftime("%a, %d %b %Y %H:%M:%S"))
