#!/usr/bin/env python
import matplotlib.pyplot as plt
import time
import argparse
import numpy as np
import MDAnalysis as mda
import MDAnalysis.transformations


#from MDAnalysis.transformations import unwrap
from multipole import Multipoles


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Calculate the bins of the charge, dipole and quadrapole. Currently only implemented for water.. This can be done for just a single frame, or an entire trajectory')
    parser.add_argument("topfile",help='The topology file name', type=str)
    # optional trajectory argument -t
    parser.add_argument("-f","--trajfile", default = None,type=str,metavar='Trajectory')
    parser.add_argument("-v","--verbose", default = False,action="store_true",help='Increase verbosity')
    parser.add_argument("-m","--inmem",default=False,action="store_true",help='Load Trajectory Into memory')
    parser.add_argument("--water_model",default="tip4p05",choices=['tip4p05', 'spce', 'tip3p'], help="calculate the mutipole moments for the specified water model. Applies some pre-processing such as assigning charges if not already.")
    parser.add_argument("-b","--begin",default="0")
    parser.add_argument("-e","--end",default="-1")
    parser.add_argument("-M","--M_name",default="M",help='the atom name or type to use for the centre of the molecule for binning and multipole moment calculation. Should use O for tip3p/spc styles and dummy atom for tip4p styles.')
    parser.add_argument("-H","--H_name",default="H",nargs='+',type=str)
    
    parser.add_argument("-w","--bin_width",default=0.25,type=float,help='The target width of the bins to use, in Angstrom. Overridden if number of bins is set instead')
    parser.add_argument("-c","--coord_centre",default=False,action="store_true",help='if used, binned coordinate is centre of the bin, else it is the left edge')
    parser.add_argument("--check_unwrapped",default=False, action="store_true")
    parser.add_argument("--types_or_names",default=None,choices=[None,'type','name'],help='Specify whether hydrogen/centre choice is in reference to the atom type or name. By default tries to find names')
    args = parser.parse_args()
    
    if args.verbose: print('Started', time.strftime("%a, %d %b %Y %H:%M:%S"))

    if args.trajfile: 
        u = mda.Universe(args.topfile,args.trajfile,in_memory = args.inmem)
        #set timestep to last for checking of unwrapping
        u.trajectory[-1]
    else:
        u = mda.Universe(args.topfile,in_memory = args.inmem)


    #checking if the coords in last step need to be unwrapped:


    if ((u.dimensions[:3]-u.atoms.positions < 0 ).any()) or not args.check_unwrapped:
        # then coords are definitely already unwrapped, nothing needs to be done
        if args.verbose: print('Coordinates definitely unwrapped or not checked. Proceeding to calculation')
    else:
        #coords may or may not be unwrapped. Apply transformation just to be safe
        if args.verbose: print('Coordinates might not be unwrapped, unwrapping in case.')
        ag = u.atoms
        unwrap_transform = MDAnalysis.transformations.unwrap(ag)
        u.trajectory.add_transformations(unwrap_transform)

    if args.trajfile: u.trajectory[0] #go back to first step # only needed if trajectory is included

    # Check if the system has either atom name or type topology information.
    if args.types_or_names:
        types_or_names = args.types_or_names
    else:
        types_or_names = Multipoles.check_types_or_names(u)
    # verify if charges are present or not.
    try:
        u.atoms.charges
        charges_defined = True
    except mda.NoDataError:
        charges_defined = False 

    # add charges and masses for tip4p/2005
    if args.water_model == 'tip4p05':
        if args.verbose: print('Assinging TIP4P/2005 parameters')
        u.add_TopologyAttr('charge')
        # u.select_atoms('name O').charges = 0
        # u.select_atoms('name O').masses = 15.9994
        u.select_atoms(f"{types_or_names} {' '.join(args.H_name)}").charges = 0.5564 # jointogether the list of hydrogen atom names
        u.select_atoms(f"{types_or_names} {' '.join(args.H_name)}").masses = 1.008
        u.select_atoms(f'{types_or_names} {args.M_name}').charges = -1.1128
        u.select_atoms(f'{types_or_names} {args.M_name}').masses = 0
    if args.water_model == 'spce' and not charges_defined:
        if args.verbose: print('Assinging SPC/E parameters')
        # if charges are not defined, overide with spce parameters
        u.add_TopologyAttr('charge')
        u.select_atoms(f"{types_or_names} {' '.join(args.H_name)}").charges = 0.4238 # jointogether the list of hydrogen atom names
        u.select_atoms(f"{types_or_names} {' '.join(args.H_name)}").masses = 1.008
        u.select_atoms(f'{types_or_names} {args.M_name}').charges = -0.8476
        u.select_atoms(f'{types_or_names} {args.M_name}').masses = 15.9994
    if args.water_model == 'tip3p' and not charges_defined:
        if args.verbose: print('Assinging TIP3P Charge parameters')
        # if charges are not defined, overide with spce parameters
        u.add_TopologyAttr('charge')
        u.select_atoms(f"{types_or_names} {' '.join(args.H_name)}").charges = 0.417 # jointogether the list of hydrogen atom names
        u.select_atoms(f"{types_or_names} {' '.join(args.H_name)}").masses = 1.008
        u.select_atoms(f'{types_or_names} {args.M_name}').charges = -0.834
        u.select_atoms(f'{types_or_names} {args.M_name}').masses = 15.9994

    #
    multip = Multipoles(u.atoms,verbose=args.verbose,centre=args.M_name,H_types=args.H_name, binsize=args.bin_width)
    multip.run()
    if args.verbose: print('Calculation finished')


    
    if args.coord_centre:
        # bins at centre
        true_bw = (multip.ul-multip.ll)/multip.nbins
        z = np.arange(multip.ll+true_bw/2,multip.ul,true_bw) # arange used to ensure the coordinate doesn't go over the box edge
    else:
        # bins at left edge
        z = np.linspace(multip.ll,multip.ul,multip.nbins,endpoint=False)  # excludes the last point, so that the left edges are considered only
        z = multip.left_edges
    if args.verbose: print('Starting save')
    np.savetxt('profs.dat',np.array([z, multip.charge_dens,multip.dipole[0,:],multip.dipole[1,:], multip.dipole[2,:],multip.quadrapole[0,0,:], multip.quadrapole[1,1,:],multip.quadrapole[2,2,:],multip.quadrapole[0,1,:], 
                                     multip.quadrapole[0,2,:],multip.quadrapole[1,2,:],multip.mol_density,multip.cos_theta,multip.angular_moment_2]).T,header='coord charge_dens P_x P_y P_z Q_xx Q_yy Q_zz Q_xy Q_xz Q_yz rho_mol cos_theta cos_theta_moment_2')

    plt.plot(z,multip.charge_dens,label='rho')
    plt.plot(z, multip.quadrapole[2,2,:],label='P_z')
    plt.plot(z,multip.dipole[2,:],label='Q_ZZ')
    plt.savefig('profs.png')
    plt.close()


    plt.plot(z, multip.cos_theta,label=r'$\langle \cos(\theta)\rangle$')
    plt.plot(z,multip.angular_moment_2,label=r'$\frac{1}{2}\left 3\langle \cos(\theta)^2\rangle-1\right)')
    plt.savefig('angles.png')
    plt.close()

    if args.verbose: print('Finished', time.strftime("%a, %d %b %Y %H:%M:%S"))

 
    #print('Finished', time.strftime("%a, %d %b %Y %H:%M:%S"))
